// Generated by CoffeeScript 1.6.2
(function() {
  var CacheReader, CacheStream, argv, crypto, http, server, stream, url, util, _cache,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  crypto = require('crypto');

  url = require('url');

  http = require('http');

  stream = require('stream');

  util = require('util');

  argv = require('optimist').usage('Usage $0 <host> [<port>]')["default"]('p', 8080).argv;

  _cache = {};

  CacheStream = (function(_super) {
    __extends(CacheStream, _super);

    function CacheStream(key, resp) {
      this.key = key;
      this._transform = __bind(this._transform, this);
      this.resp = {
        headers: resp.headers,
        statusCode: resp.statusCode
      };
      CacheStream.__super__.constructor.apply(this, arguments);
    }

    CacheStream.prototype._transform = function(chunk, encoding, cb) {
      _cache[this.key] = _cache[this.key] || {
        stream: [],
        resp: this.resp
      };
      _cache[this.key].stream.push([chunk, encoding]);
      return cb(null, chunk);
    };

    return CacheStream;

  })(stream.Transform);

  CacheReader = (function(_super) {
    __extends(CacheReader, _super);

    function CacheReader(key) {
      this.key = key;
      this._read = __bind(this._read, this);
      this.index = 0;
      CacheReader.__super__.constructor.apply(this, arguments);
    }

    CacheReader.prototype._read = function() {
      var data;

      if (_cache[this.key].stream.length > this.index) {
        data = _cache[this.key].stream[this.index];
        this.push(data[0], data[1]);
        return this.index += 1;
      } else {
        return this.push(null);
      }
    };

    CacheReader.prototype.writeHead = function(res) {
      var head;

      head = _cache[this.key].resp;
      return res.writeHead(head.statusCode, head.headers);
    };

    return CacheReader;

  })(stream.Readable);

  server = http.createServer(function(req, res) {
    var cache_reader, cached_resp, external_req, key, options;

    options = {
      host: argv._[0],
      port: argv._[1] || 80,
      method: req.method,
      path: url.parse(req.url).path,
      headers: req.headers
    };
    key = crypto.createHash('md5').update(JSON.stringify(options)).digest('hex');
    cached_resp = _cache[key];
    if (cached_resp) {
      cache_reader = new CacheReader(key);
      cache_reader.writeHead(res);
      return cache_reader.pipe(res);
    } else {
      external_req = http.request(options, function(proxy_response) {
        var cache_stream;

        cache_stream = new CacheStream(key, proxy_response);
        res.writeHead(proxy_response.statusCode, proxy_response.headers);
        return proxy_response.pipe(cache_stream).pipe(res);
      });
      return req.pipe(external_req);
    }
  });

  server.listen(argv.p);

  console.log("Proxy availible on localhost:" + argv.p);

}).call(this);
